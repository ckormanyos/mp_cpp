///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 1999 - 2019.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

// *****************************************************************************
// Filename    : mp_core.cpp
// 
// Project     : Multiple precision math
// 
// Author      : Christopher Kormanyos
// Owner       : Christopher Kormanyos
// 
// Date        : 1999 - 2019
// 
// Description : Implementation of mp_core multiple precision class.
// 
// *****************************************************************************

#include <algorithm>
#include <limits>
#include <vector>

#include <mp/mp_core.h>
#include <mp/mp_cpp_limits.h>
#include <mp/mp_fft/mp_fft_fftw2.h>

mp::mp_core::~mp_core()
{
  // Delete the FFT memory.
  delete mp_core_memory;

  // Delete the FFT objects in the FFT list.
  std::for_each(fft_list.cbegin(),
                fft_list.cend(),
                [](const mp_fft_base* p_fft)
                {
                  delete p_fft;
                });

  fft_list.clear();
}

bool mp::mp_core::create_mp_core()
{
  mp_core::forward_set_of_mp_cpp_numeric_limits(digit_characteristics.mp_digits10());

  bool result;

  // Allocate the memory needed for the FFT arrays.
  // Allocate enough for the largest one of the FFTs.
  // But use parts of the same memory for all of them.
  if(digit_characteristics.mp_elem_number() < mp_elem_fft_min)
  {
    mp_core_memory = new (std::nothrow) mp_core_memory_type(digit_characteristics.mp_elem_number());

    result = true;
  }
  else
  {
    // Select FFT lengths that run quickly with FFTW.

    // First generate a table of so-called 5-smooth numbers.
    // FFTW is generally efficient with FFTs having lengths
    // of 5-smooth numbers. Dynamically select the FFT length
    // by choosing the nearest 5-smooth number that is greater
    // than or equal to the size of the half-complex input FFT
    // data array.

    // Create a constant vector of even-valued 5-smooth numbers
    // up to and including 5*10^8. The 5-smooth numbers are given
    // by (2^i * 3^j * 5^k). 5-smooth numbers can be generated
    // quickly with Mathematica using:
    // mx = 500000000; Sort@ Flatten@Table[2^a*3^b*5^c, {a, 0, Log[2, mx]}, {b, 0, Log[3, mx/2^a]}, {c, 0, Log[5, mx/(2^a*3^b)]}]
    // See Sloane's A051037 for more information.

    const std::vector<std::uint32_t>* A051037_even =
      new (std::nothrow) std::vector<std::uint32_t>
      (
        {
                  2U,           4U,           6U,           8U,          10U,          12U,          16U,          18U,          20U,          24U,          30U,          32U,          36U,          40U,          48U,          50U,
                 54U,          60U,          64U,          72U,          80U,          90U,          96U,         100U,         108U,         120U,         128U,         144U,         150U,         160U,         162U,         180U,
                192U,         200U,         216U,         240U,         250U,         256U,         270U,         288U,         300U,         320U,         324U,         360U,         384U,         400U,         432U,         450U,
                480U,         486U,         500U,         512U,         540U,         576U,         600U,         640U,         648U,         720U,         750U,         768U,         800U,         810U,         864U,         900U,
                960U,         972U,        1000U,        1024U,        1080U,        1152U,        1200U,        1250U,        1280U,        1296U,        1350U,        1440U,        1458U,        1500U,        1536U,        1600U,
               1620U,        1728U,        1800U,        1920U,        1944U,        2000U,        2048U,        2160U,        2250U,        2304U,        2400U,        2430U,        2500U,        2560U,        2592U,        2700U,
               2880U,        2916U,        3000U,        3072U,        3200U,        3240U,        3456U,        3600U,        3750U,        3840U,        3888U,        4000U,        4050U,        4096U,        4320U,        4374U,
               4500U,        4608U,        4800U,        4860U,        5000U,        5120U,        5184U,        5400U,        5760U,        5832U,        6000U,        6144U,        6250U,        6400U,        6480U,        6750U,
               6912U,        7200U,        7290U,        7500U,        7680U,        7776U,        8000U,        8100U,        8192U,        8640U,        8748U,        9000U,        9216U,        9600U,        9720U,       10000U,
              10240U,       10368U,       10800U,       11250U,       11520U,       11664U,       12000U,       12150U,       12288U,       12500U,       12800U,       12960U,       13122U,       13500U,       13824U,       14400U,
              14580U,       15000U,       15360U,       15552U,       16000U,       16200U,       16384U,       17280U,       17496U,       18000U,       18432U,       18750U,       19200U,       19440U,       20000U,       20250U,
              20480U,       20736U,       21600U,       21870U,       22500U,       23040U,       23328U,       24000U,       24300U,       24576U,       25000U,       25600U,       25920U,       26244U,       27000U,       27648U,
              28800U,       29160U,       30000U,       30720U,       31104U,       31250U,       32000U,       32400U,       32768U,       33750U,       34560U,       34992U,       36000U,       36450U,       36864U,       37500U,
              38400U,       38880U,       39366U,       40000U,       40500U,       40960U,       41472U,       43200U,       43740U,       45000U,       46080U,       46656U,       48000U,       48600U,       49152U,       50000U,
              51200U,       51840U,       52488U,       54000U,       55296U,       56250U,       57600U,       58320U,       60000U,       60750U,       61440U,       62208U,       62500U,       64000U,       64800U,       65536U,
              65610U,       67500U,       69120U,       69984U,       72000U,       72900U,       73728U,       75000U,       76800U,       77760U,       78732U,       80000U,       81000U,       81920U,       82944U,       86400U,
              87480U,       90000U,       92160U,       93312U,       93750U,       96000U,       97200U,       98304U,      100000U,      101250U,      102400U,      103680U,      104976U,      108000U,      109350U,      110592U,
             112500U,      115200U,      116640U,      118098U,      120000U,      121500U,      122880U,      124416U,      125000U,      128000U,      129600U,      131072U,      131220U,      135000U,      138240U,      139968U,
             144000U,      145800U,      147456U,      150000U,      153600U,      155520U,      156250U,      157464U,      160000U,      162000U,      163840U,      165888U,      168750U,      172800U,      174960U,      180000U,
             182250U,      184320U,      186624U,      187500U,      192000U,      194400U,      196608U,      196830U,      200000U,      202500U,      204800U,      207360U,      209952U,      216000U,      218700U,      221184U,
             225000U,      230400U,      233280U,      236196U,      240000U,      243000U,      245760U,      248832U,      250000U,      256000U,      259200U,      262144U,      262440U,      270000U,      276480U,      279936U,
             281250U,      288000U,      291600U,      294912U,      300000U,      303750U,      307200U,      311040U,      312500U,      314928U,      320000U,      324000U,      327680U,      328050U,      331776U,      337500U,
             345600U,      349920U,      354294U,      360000U,      364500U,      368640U,      373248U,      375000U,      384000U,      388800U,      393216U,      393660U,      400000U,      405000U,      409600U,      414720U,
             419904U,      432000U,      437400U,      442368U,      450000U,      460800U,      466560U,      468750U,      472392U,      480000U,      486000U,      491520U,      497664U,      500000U,      506250U,      512000U,
             518400U,      524288U,      524880U,      540000U,      546750U,      552960U,      559872U,      562500U,      576000U,      583200U,      589824U,      590490U,      600000U,      607500U,      614400U,      622080U,
             625000U,      629856U,      640000U,      648000U,      655360U,      656100U,      663552U,      675000U,      691200U,      699840U,      708588U,      720000U,      729000U,      737280U,      746496U,      750000U,
             768000U,      777600U,      781250U,      786432U,      787320U,      800000U,      810000U,      819200U,      829440U,      839808U,      843750U,      864000U,      874800U,      884736U,      900000U,      911250U,
             921600U,      933120U,      937500U,      944784U,      960000U,      972000U,      983040U,      984150U,      995328U,     1000000U,     1012500U,     1024000U,     1036800U,     1048576U,     1049760U,     1062882U,
            1080000U,     1093500U,     1105920U,     1119744U,     1125000U,     1152000U,     1166400U,     1179648U,     1180980U,     1200000U,     1215000U,     1228800U,     1244160U,     1250000U,     1259712U,     1280000U,
            1296000U,     1310720U,     1312200U,     1327104U,     1350000U,     1382400U,     1399680U,     1406250U,     1417176U,     1440000U,     1458000U,     1474560U,     1492992U,     1500000U,     1518750U,     1536000U,
            1555200U,     1562500U,     1572864U,     1574640U,     1600000U,     1620000U,     1638400U,     1640250U,     1658880U,     1679616U,     1687500U,     1728000U,     1749600U,     1769472U,     1771470U,     1800000U,
            1822500U,     1843200U,     1866240U,     1875000U,     1889568U,     1920000U,     1944000U,     1966080U,     1968300U,     1990656U,     2000000U,     2025000U,     2048000U,     2073600U,     2097152U,     2099520U,
            2125764U,     2160000U,     2187000U,     2211840U,     2239488U,     2250000U,     2304000U,     2332800U,     2343750U,     2359296U,     2361960U,     2400000U,     2430000U,     2457600U,     2488320U,     2500000U,
            2519424U,     2531250U,     2560000U,     2592000U,     2621440U,     2624400U,     2654208U,     2700000U,     2733750U,     2764800U,     2799360U,     2812500U,     2834352U,     2880000U,     2916000U,     2949120U,
            2952450U,     2985984U,     3000000U,     3037500U,     3072000U,     3110400U,     3125000U,     3145728U,     3149280U,     3188646U,     3200000U,     3240000U,     3276800U,     3280500U,     3317760U,     3359232U,
            3375000U,     3456000U,     3499200U,     3538944U,     3542940U,     3600000U,     3645000U,     3686400U,     3732480U,     3750000U,     3779136U,     3840000U,     3888000U,     3906250U,     3932160U,     3936600U,
            3981312U,     4000000U,     4050000U,     4096000U,     4147200U,     4194304U,     4199040U,     4218750U,     4251528U,     4320000U,     4374000U,     4423680U,     4478976U,     4500000U,     4556250U,     4608000U,
            4665600U,     4687500U,     4718592U,     4723920U,     4800000U,     4860000U,     4915200U,     4920750U,     4976640U,     5000000U,     5038848U,     5062500U,     5120000U,     5184000U,     5242880U,     5248800U,
            5308416U,     5314410U,     5400000U,     5467500U,     5529600U,     5598720U,     5625000U,     5668704U,     5760000U,     5832000U,     5898240U,     5904900U,     5971968U,     6000000U,     6075000U,     6144000U,
            6220800U,     6250000U,     6291456U,     6298560U,     6377292U,     6400000U,     6480000U,     6553600U,     6561000U,     6635520U,     6718464U,     6750000U,     6912000U,     6998400U,     7031250U,     7077888U,
            7085880U,     7200000U,     7290000U,     7372800U,     7464960U,     7500000U,     7558272U,     7593750U,     7680000U,     7776000U,     7812500U,     7864320U,     7873200U,     7962624U,     8000000U,     8100000U,
            8192000U,     8201250U,     8294400U,     8388608U,     8398080U,     8437500U,     8503056U,     8640000U,     8748000U,     8847360U,     8857350U,     8957952U,     9000000U,     9112500U,     9216000U,     9331200U,
            9375000U,     9437184U,     9447840U,     9565938U,     9600000U,     9720000U,     9830400U,     9841500U,     9953280U,    10000000U,    10077696U,    10125000U,    10240000U,    10368000U,    10485760U,    10497600U,
           10616832U,    10628820U,    10800000U,    10935000U,    11059200U,    11197440U,    11250000U,    11337408U,    11520000U,    11664000U,    11718750U,    11796480U,    11809800U,    11943936U,    12000000U,    12150000U,
           12288000U,    12441600U,    12500000U,    12582912U,    12597120U,    12656250U,    12754584U,    12800000U,    12960000U,    13107200U,    13122000U,    13271040U,    13436928U,    13500000U,    13668750U,    13824000U,
           13996800U,    14062500U,    14155776U,    14171760U,    14400000U,    14580000U,    14745600U,    14762250U,    14929920U,    15000000U,    15116544U,    15187500U,    15360000U,    15552000U,    15625000U,    15728640U,
           15746400U,    15925248U,    15943230U,    16000000U,    16200000U,    16384000U,    16402500U,    16588800U,    16777216U,    16796160U,    16875000U,    17006112U,    17280000U,    17496000U,    17694720U,    17714700U,
           17915904U,    18000000U,    18225000U,    18432000U,    18662400U,    18750000U,    18874368U,    18895680U,    19131876U,    19200000U,    19440000U,    19531250U,    19660800U,    19683000U,    19906560U,    20000000U,
           20155392U,    20250000U,    20480000U,    20736000U,    20971520U,    20995200U,    21093750U,    21233664U,    21257640U,    21600000U,    21870000U,    22118400U,    22394880U,    22500000U,    22674816U,    22781250U,
           23040000U,    23328000U,    23437500U,    23592960U,    23619600U,    23887872U,    24000000U,    24300000U,    24576000U,    24603750U,    24883200U,    25000000U,    25165824U,    25194240U,    25312500U,    25509168U,
           25600000U,    25920000U,    26214400U,    26244000U,    26542080U,    26572050U,    26873856U,    27000000U,    27337500U,    27648000U,    27993600U,    28125000U,    28311552U,    28343520U,    28697814U,    28800000U,
           29160000U,    29491200U,    29524500U,    29859840U,    30000000U,    30233088U,    30375000U,    30720000U,    31104000U,    31250000U,    31457280U,    31492800U,    31850496U,    31886460U,    32000000U,    32400000U,
           32768000U,    32805000U,    33177600U,    33554432U,    33592320U,    33750000U,    34012224U,    34560000U,    34992000U,    35156250U,    35389440U,    35429400U,    35831808U,    36000000U,    36450000U,    36864000U,
           37324800U,    37500000U,    37748736U,    37791360U,    37968750U,    38263752U,    38400000U,    38880000U,    39062500U,    39321600U,    39366000U,    39813120U,    40000000U,    40310784U,    40500000U,    40960000U,
           41006250U,    41472000U,    41943040U,    41990400U,    42187500U,    42467328U,    42515280U,    43200000U,    43740000U,    44236800U,    44286750U,    44789760U,    45000000U,    45349632U,    45562500U,    46080000U,
           46656000U,    46875000U,    47185920U,    47239200U,    47775744U,    47829690U,    48000000U,    48600000U,    49152000U,    49207500U,    49766400U,    50000000U,    50331648U,    50388480U,    50625000U,    51018336U,
           51200000U,    51840000U,    52428800U,    52488000U,    53084160U,    53144100U,    53747712U,    54000000U,    54675000U,    55296000U,    55987200U,    56250000U,    56623104U,    56687040U,    57395628U,    57600000U,
           58320000U,    58593750U,    58982400U,    59049000U,    59719680U,    60000000U,    60466176U,    60750000U,    61440000U,    62208000U,    62500000U,    62914560U,    62985600U,    63281250U,    63700992U,    63772920U,
           64000000U,    64800000U,    65536000U,    65610000U,    66355200U,    67108864U,    67184640U,    67500000U,    68024448U,    68343750U,    69120000U,    69984000U,    70312500U,    70778880U,    70858800U,    71663616U,
           72000000U,    72900000U,    73728000U,    73811250U,    74649600U,    75000000U,    75497472U,    75582720U,    75937500U,    76527504U,    76800000U,    77760000U,    78125000U,    78643200U,    78732000U,    79626240U,
           79716150U,    80000000U,    80621568U,    81000000U,    81920000U,    82012500U,    82944000U,    83886080U,    83980800U,    84375000U,    84934656U,    85030560U,    86093442U,    86400000U,    87480000U,    88473600U,
           88573500U,    89579520U,    90000000U,    90699264U,    91125000U,    92160000U,    93312000U,    93750000U,    94371840U,    94478400U,    95551488U,    95659380U,    96000000U,    97200000U,    97656250U,    98304000U,
           98415000U,    99532800U,   100000000U,   100663296U,   100776960U,   101250000U,   102036672U,   102400000U,   103680000U,   104857600U,   104976000U,   105468750U,   106168320U,   106288200U,   107495424U,   108000000U,
          109350000U,   110592000U,   111974400U,   112500000U,   113246208U,   113374080U,   113906250U,   114791256U,   115200000U,   116640000U,   117187500U,   117964800U,   118098000U,   119439360U,   120000000U,   120932352U,
          121500000U,   122880000U,   123018750U,   124416000U,   125000000U,   125829120U,   125971200U,   126562500U,   127401984U,   127545840U,   128000000U,   129600000U,   131072000U,   131220000U,   132710400U,   132860250U,
          134217728U,   134369280U,   135000000U,   136048896U,   136687500U,   138240000U,   139968000U,   140625000U,   141557760U,   141717600U,   143327232U,   143489070U,   144000000U,   145800000U,   147456000U,   147622500U,
          149299200U,   150000000U,   150994944U,   151165440U,   151875000U,   153055008U,   153600000U,   155520000U,   156250000U,   157286400U,   157464000U,   159252480U,   159432300U,   160000000U,   161243136U,   162000000U,
          163840000U,   164025000U,   165888000U,   167772160U,   167961600U,   168750000U,   169869312U,   170061120U,   172186884U,   172800000U,   174960000U,   175781250U,   176947200U,   177147000U,   179159040U,   180000000U,
          181398528U,   182250000U,   184320000U,   186624000U,   187500000U,   188743680U,   188956800U,   189843750U,   191102976U,   191318760U,   192000000U,   194400000U,   195312500U,   196608000U,   196830000U,   199065600U,
          200000000U,   201326592U,   201553920U,   202500000U,   204073344U,   204800000U,   205031250U,   207360000U,   209715200U,   209952000U,   210937500U,   212336640U,   212576400U,   214990848U,   216000000U,   218700000U,
          221184000U,   221433750U,   223948800U,   225000000U,   226492416U,   226748160U,   227812500U,   229582512U,   230400000U,   233280000U,   234375000U,   235929600U,   236196000U,   238878720U,   239148450U,   240000000U,
          241864704U,   243000000U,   245760000U,   246037500U,   248832000U,   250000000U,   251658240U,   251942400U,   253125000U,   254803968U,   255091680U,   256000000U,   258280326U,   259200000U,   262144000U,   262440000U,
          265420800U,   265720500U,   268435456U,   268738560U,   270000000U,   272097792U,   273375000U,   276480000U,   279936000U,   281250000U,   283115520U,   283435200U,   286654464U,   286978140U,   288000000U,   291600000U,
          292968750U,   294912000U,   295245000U,   298598400U,   300000000U,   301989888U,   302330880U,   303750000U,   306110016U,   307200000U,   311040000U,   312500000U,   314572800U,   314928000U,   316406250U,   318504960U,
          318864600U,   320000000U,   322486272U,   324000000U,   327680000U,   328050000U,   331776000U,   335544320U,   335923200U,   337500000U,   339738624U,   340122240U,   341718750U,   344373768U,   345600000U,   349920000U,
          351562500U,   353894400U,   354294000U,   358318080U,   360000000U,   362797056U,   364500000U,   368640000U,   369056250U,   373248000U,   375000000U,   377487360U,   377913600U,   379687500U,   382205952U,   382637520U,
          384000000U,   388800000U,   390625000U,   393216000U,   393660000U,   398131200U,   398580750U,   400000000U,   402653184U,   403107840U,   405000000U,   408146688U,   409600000U,   410062500U,   414720000U,   419430400U,
          419904000U,   421875000U,   424673280U,   425152800U,   429981696U,   430467210U,   432000000U,   437400000U,   442368000U,   442867500U,   447897600U,   450000000U,   452984832U,   453496320U,   455625000U,   459165024U,
          460800000U,   466560000U,   468750000U,   471859200U,   472392000U,   477757440U,   478296900U,   480000000U,   483729408U,   486000000U,   488281250U,   491520000U,   492075000U,   497664000U,   500000000U,
        }
      );

    // Dynamically create a container of FFT objects within a min/max range
    // appropriate for the dynamic precision of mp_cpp. Each FFT has a size
    // taken from the table of 5-smooth numbers above. Only even-numbered
    // FFT sizes are included.
    const auto it_lo =
      std::lower_bound(A051037_even->cbegin(),
                       A051037_even->cend() - 1U,
                       static_cast<std::uint32_t>((mp_elem_fft_min * 2) * 2));

    const auto it_hi =
      std::upper_bound(A051037_even->cbegin(),
                       A051037_even->cend() - 1U,
                       static_cast<std::uint32_t>((digit_characteristics.mp_elem_number() * 2) * 2));

    mp_core_memory =
      new (std::nothrow) mp_core_memory_type(digit_characteristics.mp_elem_number(),
                                             static_cast<std::size_t>(*it_hi));

    if(mp_core_memory->is_valid())
    {
      fft_list.reserve(std::distance(it_lo, it_hi + 1U));

      std::for_each(it_lo,
                    it_hi + 1U,
                    [this](const std::uint32_t& my_n)
                    {
                      // Make the traits for the next FFT.
                      mp_fft_base::fft_traits_type traits_fwd_1(mp_core_memory->mem_a(),    mp_core_memory->mem_buf0(), number_of_fft_threads);
                      mp_fft_base::fft_traits_type traits_fwd_2(mp_core_memory->mem_b(),    mp_core_memory->mem_buf1(), number_of_fft_threads);
                      mp_fft_base::fft_traits_type traits_rev  (mp_core_memory->mem_buf0(), mp_core_memory->mem_a(),    number_of_fft_threads);

                      // Allocate the next FFT and add it to the list.
                      mp_fft_fftw2* p_fft =
                        new mp_fft_fftw2(static_cast<std::int32_t>(my_n),
                                         traits_fwd_1,
                                         traits_fwd_2,
                                         traits_rev);

                      this->fft_list.push_back(p_fft);
                    });
    }

    result = (fft_list.empty() == false);

    delete A051037_even;
  }

  return result;
}

const mp::mp_fft_base* mp::mp_core::get_fft(const std::int32_t n) const
{
  const mp::mp_fft_base* pointer_to_fft;

  const auto it =
    std::find_if(fft_list.cbegin(),
                 fft_list.cend(),
                 [&n](const mp_fft_base* p_fft) -> bool
                 {
                   return (p_fft->get_fft_n() >= n);
                 });

  if(it != fft_list.cend())
  {
    if((*it)->get_is_created() == false)
    {
      const bool create_fft_is_ok = (*it)->create_fft();

      static_cast<void>(create_fft_is_ok);
    }

    pointer_to_fft = *it;
  }
  else
  {
    if(fft_list.back()->get_is_created() == false)
    {
      const bool create_fft_is_ok = fft_list.back()->create_fft();

      static_cast<void>(create_fft_is_ok);
    }

    pointer_to_fft = fft_list.back();
  }

  return pointer_to_fft;
}

mp::mp_core::mp_core_memory_type::mp_core_memory_type(const std::size_t int_count,
                                                      const std::size_t fft_count) noexcept
  : fft_max_size(fft_count),
    mem_dbl     (nullptr),
    mem_int     (nullptr),
    m_valid     (true)
{
  if(fft_count > std::size_t(0U))
  {
    mem_dbl = new (std::nothrow) double[fft_count * 4U];

    m_valid &= (mem_dbl != nullptr);
  }

  if(int_count > std::size_t(0U))
  {
    mem_int = new (std::nothrow) std::uint32_t[int_count];

    m_valid &= (mem_int != nullptr);
  }
}

mp::mp_core::mp_core_memory_type::~mp_core_memory_type()
{
  if(mem_dbl != nullptr) { delete [] mem_dbl; }
  if(mem_int != nullptr) { delete [] mem_int; }
}

void mp::mp_core::forward_set_of_mp_cpp_numeric_limits(const std::int32_t n)
{
  static bool is_init = false;

  if(!is_init)
  {
    is_init = true;

    std::numeric_limits<mp::mp_cpp>::digits       = n;
    std::numeric_limits<mp::mp_cpp>::digits10     = n;
    std::numeric_limits<mp::mp_cpp>::max_digits10 = n + 1;
  }
}
