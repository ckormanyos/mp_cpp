##############################################################################
#  Copyright Christopher Kormanyos 2023.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)

name: mp_cpp
on:
  push:
    branches:
      - '**'
  pull_request:
  schedule:
    - cron: '50 21 * * *' # run at 9:50 PM UTC
jobs:
  gcc-native:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        standard: [ c++11, c++20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: gcc-native
        run: |
          make GCC=${{ matrix.compiler }} STD=${{ matrix.standard }} prepare
          make GCC=${{ matrix.compiler }} STD=${{ matrix.standard }} --jobs=8 all
          ls -la ./unix/bessel.exe ./unix/gamma.exe ./unix/ln2.exe ./unix/pi.exe ./unix/test.exe
          ./unix/pi.exe -t16
          echo grep around the millionth tail digits of pi
          grep '5779458151' ./unix/pi.out
          ./unix/ln2.exe -t16
          echo grep around the millionth tail digits of ln2
          grep '6808836542' ./unix/ln2.out
          ./unix/gamma.exe
          ./unix/test.exe
  gcc-native-pi-algos:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++ ]
        standard: [ c++20 ]
        algo: [ -m1, -m2, -m3 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: gcc-native
        run: |
          make GCC=${{ matrix.compiler }} STD=${{ matrix.standard }} prepare
          make GCC=${{ matrix.compiler }} STD=${{ matrix.standard }} --jobs=8 all
          ls -la ./unix/bessel.exe ./unix/gamma.exe ./unix/ln2.exe ./unix/pi.exe ./unix/test.exe
          ./unix/pi.exe -t16 ${{ matrix.algo }}
          echo grep around the millionth tail digits of pi
          grep '5779458151' ./unix/pi.out
  gcc-native-sanitize:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++11 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: gcc-native-sanitize
        run: |
          make GCC=g++ STD=${{ matrix.standard }} SAN=1 prepare
          make GCC=g++ STD=${{ matrix.standard }} SAN=1 --jobs=8 all
          ls -la ./unix/bessel.exe ./unix/gamma.exe ./unix/ln2.exe ./unix/pi.exe ./unix/test.exe
          ./unix/pi.exe -t16
          echo grep around the millionth tail digits of pi
          grep '5779458151' ./unix/pi.out
          ./unix/ln2.exe -t16
          echo grep around the millionth tail digits of ln2
          grep '6808836542' ./unix/ln2.out
          ./unix/gamma.exe
          ./unix/test.exe
  macos-native:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++11, c++20 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: macos-native
        run: |
          make GCC=clang++ STD=${{ matrix.standard }} prepare
          make GCC=clang++ STD=${{ matrix.standard }} --jobs=8 all
          ls -la ./unix/bessel.exe ./unix/gamma.exe ./unix/ln2.exe ./unix/pi.exe ./unix/test.exe
          ./unix/pi.exe -t16
          echo grep around the millionth tail digits of pi
          grep '5779458151' ./unix/pi.out
          ./unix/ln2.exe -t16
          echo grep around the millionth tail digits of ln2
          grep '6808836542' ./unix/ln2.out
          ./unix/gamma.exe
          ./unix/test.exe
  msvc-release-x64:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        example: [ Bessel, Gamma, Ln2, Pi, Test ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - uses: actions/checkout@v3
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
      - name: msvc-release-lib-x64
        shell: cmd
        working-directory: ./
        run: |
          set INCLUDE=%cd%\fft\FFTW\215\fftw;%cd%\fft\FFTW\215\rfftw;%cd%\fft\FFTW\215\threads;%cd%;%INCLUDE%
          MSBuild -m mp_cpp.sln -p:useenv=true -p:Configuration=Mp_Cpp_Lib_Release -p:Platform=x64 /t:Rebuild
          dir %cd%\_Out\mp_cpp\x64\Mp_Cpp_Lib_Release\Mp_Cpp_Lib_Release.lib
      - name: msvc-release-x64
        shell: cmd
        working-directory: ./
        run: |
          set INCLUDE=%cd%;%INCLUDE%
          MSBuild -m mp_cpp.sln -p:useenv=true -p:Configuration=${{ matrix.example }}_Exe_Release -p:Platform=x64 /t:Build
          dir %cd%\_Out\mp_cpp\x64\${{ matrix.example }}_Exe_Release\${{ matrix.example }}_Exe_Release.exe
          %cd%\_Out\mp_cpp\x64\${{ matrix.example }}_Exe_Release\${{ matrix.example }}_Exe_Release.exe
  msvc-release-boost-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.bat
          ./b2 headers
      - uses: actions/checkout@v3
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
      - name: msvc-release-lib-x64
        shell: cmd
        working-directory: ./
        run: |
          set INCLUDE=%cd%\fft\FFTW\215\fftw;%cd%\fft\FFTW\215\rfftw;%cd%\fft\FFTW\215\threads;%cd%;%INCLUDE%
          MSBuild -m mp_cpp.sln -p:useenv=true -p:Configuration=Mp_Cpp_Lib_Release -p:Platform=x64 /t:Rebuild
          dir %cd%\_Out\mp_cpp\x64\Mp_Cpp_Lib_Release\Mp_Cpp_Lib_Release.lib
      - name: msvc-release-boost-x64
        shell: cmd
        working-directory: ./
        run: |
          set INCLUDE=%cd%;%cd%\..\boost-root;%INCLUDE%
          MSBuild -m mp_cpp.sln -p:useenv=true -p:Configuration=Boost_Exe_Release -p:Platform=x64 /t:Build
          dir %cd%\_Out\mp_cpp\x64\Boost_Exe_Release\Boost_Exe_Release.exe
          %cd%\_Out\mp_cpp\x64\Boost_Exe_Release\Boost_Exe_Release.exe
